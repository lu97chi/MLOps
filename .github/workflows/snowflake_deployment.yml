name: Snowflake Model Deployment

on:
  workflow_dispatch:  # Allows the workflow to be triggered manually

permissions:
  id-token: write
  contents: read

jobs:
  snowflake_deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install snowflake-connector-python pandas scikit-learn azure-ai-ml azure-identity

      - name: Read parameters.json
        id: read_parameters
        shell: bash
        run: |
          KEY_VAULT=$(jq -r '.keyVaultName.value' parameters.json)
          WORKSPACE_NAME=$(jq -r '.mlWorkspaceName.value' parameters.json)

          echo "AZURE_KEY_VAULT=$KEY_VAULT" >> $GITHUB_ENV
          echo "AZURE_WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_ENV
            
      - name: Azure Login using OpenID Connect
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true
      
      - name: Retrieve secrets from Azure Key Vault using Azure CLI
        id: get_secrets
        shell: bash
        env:
          AZURE_KEY_VAULT: ${{ env.AZURE_KEY_VAULT }}
        run: |
          set -e  # Exit on error
          SECRETS=("AZURECLIENTSECRET" "SNOWFLAKEUSER" "SNOWFLAKEPASSWORD" "SNOWFLAKEACCOUNT" "SNOWFLAKEWAREHOUSE" "SNOWFLAKEDATABASE" "SNOWFLAKESCHEMA" "SNOWFLAKEROLE")
          for SECRET_NAME in "${SECRETS[@]}"; do
            SECRET_VALUE=$(az keyvault secret show --vault-name "$AZURE_KEY_VAULT" --name "$SECRET_NAME" --query "value" -o tsv)
            if [ -z "$SECRET_VALUE" ]; then
              echo "Error: Could not retrieve secret $SECRET_NAME"
              exit 1
            fi
            # Export the secret as an environment variable
            echo "$SECRET_NAME=$SECRET_VALUE" >> $GITHUB_ENV
          done
      
      - name: Download the model
        id: get_model
        run: python download_model.py
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_WORKSPACE_NAME: ${{ env.AZURE_WORKSPACE_NAME }}
          AZURECLIENTSECRET: ${{ env.AZURECLIENTSECRET }}


      - name: Upload Model to Snowflake
        run: python upload_model_to_snowflake.py
        env:
          SNOWFLAKE_USER: ${{ env.SNOWFLAKEUSER }}
          SNOWFLAKE_PASSWORD: ${{ env.SNOWFLAKEPASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ env.SNOWFLAKEACCOUNT }}

      - name: Create Snowflake UDF for Inference
        run: python create_snowflake_udf.py
        env:
          SNOWFLAKE_USER: ${{ env.SNOWFLAKEUSER }}
          SNOWFLAKE_PASSWORD: ${{ env.SNOWFLAKEPASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ env.SNOWFLAKEACCOUNT }}
