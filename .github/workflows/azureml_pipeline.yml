name: Automated Model Training and Deployment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      LOCATION: ${{ secrets.LOCATION }}
      # Other environment variables will be set from parameters.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Read parameters.json
        id: read_parameters
        shell: bash
        run: |
          KEY_VAULT=$(jq -r '.keyVaultName.value' parameters.json)
          WORKSPACE_NAME=$(jq -r '.mlWorkspaceName.value' parameters.json)
          STORAGE_NAME=$(jq -r '.storageAccountName.value' parameters.json)
          INSIGHTS_NAME=$(jq -r '.applicationInsightsName.value' parameters.json)
          LOCATION=$(jq -r '.location.value' parameters.json)

          echo "AZURE_KEY_VAULT=$KEY_VAULT" >> $GITHUB_ENV
          echo "AZURE_WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$STORAGE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_INSIGHTS_NAME=$INSIGHTS_NAME" >> $GITHUB_ENV
          echo "LOCATION=$LOCATION" >> $GITHUB_ENV

      - name: Azure Login using OpenID Connect
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Install dependencies
        run: |
          pip install snowflake-connector-python pandas azure-ai-ml snowflake-snowpark-python

      - name: Retrieve secrets from Azure Key Vault using Azure CLI
        id: get_secrets
        shell: bash
        env:
          AZURE_KEY_VAULT: ${{ env.AZURE_KEY_VAULT }}
        run: |
          set -e  # Exit on error
          SECRETS=("SNOWFLAKEUSER" "SNOWFLAKEPASSWORD" "SNOWFLAKEACCOUNT" "SNOWFLAKEWAREHOUSE" "SNOWFLAKEDATABASE" "SNOWFLAKESCHEMA" "SNOWFLAKEROLE")
          for SECRET_NAME in "${SECRETS[@]}"; do
            SECRET_VALUE=$(az keyvault secret show --vault-name "$AZURE_KEY_VAULT" --name "$SECRET_NAME" --query "value" -o tsv)
            if [ -z "$SECRET_VALUE" ]; then
              echo "Error: Could not retrieve secret $SECRET_NAME"
              exit 1
            fi
            # Export the secret as an environment variable
            echo "$SECRET_NAME=$SECRET_VALUE" >> $GITHUB_ENV
          done

      - name: Extract data from Snowflake
        run: python data_extraction.py

      - name: Run training job on Azure ML
        env:
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
          AZURE_WORKSPACE_NAME: ${{ env.AZURE_WORKSPACE_NAME }}
        run: python run_training_job.py

      - name: Deploy model to Snowflake
        run: python deploy_udf.py
